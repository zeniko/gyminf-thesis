Revealing Programming Language Abstractions
===========================================
@beamer_theme default,#80B0F7 keynote alternate-rows
@author Simon Bünzli Straub
@date 20.08.2025
@listings basicstyle=\small\ttfamily basewidth=0.51em

	\usepackage{pgfplots}
	\usepgfplotslibrary{statistics}
	\newcommand{\ac}[1]{#1}
	\newcommand{\acs}[1]{#1}
	\usepackage{newunicodechar}
	\usepackage{bbding}
	\newunicodechar{✔}{\Checkmark}
	\newunicodechar{❌}{\XSolidBrush}

GymInf Thesis
-------------
![width=8cm](images/logos/gyminf_logo.png)
* Program at UniFR, 2020-2025
* Teaching qualification
  for high school

---

What does happen here?
----------------------
``` python
a = 1
b = 1
while a < 15:
	a += b
	b = a - b
print(a)
```

<PAUSE>
***

* Individual commands
<PAUSE>
* (Intended) output
<PAUSE>
* Inside the machine?

---

Brief Overview
--------------
1. The Problem $\leftarrow$
2. State of the Art
3. Solution: New Environment
4. Validation

---

Didactic Literature
-------------------
* Foundational ideas
* Sichtenwechsel
* Top-down and bottom-up approaches

---

Principle: Foundational Idea
----------------------------
* Core idea of a subject
* Relevance, depth and breadth

<PAUSE>

Examples:
* Algorithms
* Connectivity
* Modelling

---

Principle: *Sichtenwechsel*
---------------------------
* Change of perspective in relation to an abstraction level
<PAUSE>
* Increase understanding by observing the same entity at different layers
<PAUSE>
* Also teach the concept itself as a foundational idea

---

Multitier Architecture
----------------------
@todo LaTeX compilation happens in a subfolder, so all paths are one level off
	{\centering\small
	\input{../diagrams/multitier}
	}

---

The Problem
-----------
* How to demonstrate to students what happens when a program is executed?
<PAUSE>
* How to connect programming with computer architecture?

---

Requirements
------------
* Beginner-friendly programming language
  * Python (Processing)
* Manageable environment with few dependencies

---

| 2. State of the Art |

---

Environment: VS Code
--------------------
![stretch](media/debug_vscode.png)

---

Environment: VS Code
--------------------
![stretch](media/debug_vscode.png)

***

* VM access ✔
  (through extension)
* Manageability ❌
  (too much information)

---

Environment: Thonny
-------------------
![stretch](media/debug_thonny.png)

---

Environment: Thonny
-------------------
![stretch](media/debug_thonny.png)

***

* Manageability ✔
* No VM access? ❌

---

Environment: (*spoilers*)
-------------------------
![stretch](media/debug_pa.png)

***

* Manageability ✔
* VM access ✔

---

| 3. Solution: New Environment |

---

"Processing Abstractions"
-------------------------
Didactic environment:
* Compiler and runtime environment
* Views into all artifacts
* Course material

---

Technical Foundation: GT
------------------------
Glamorous Toolkit:
* Smalltalk Environment
* Complete: GUI, parsers
* Easy to extend (moldable)
* Notebook

---

Glamorous Toolkit: Notebook
---------------------------
![stretch](images/gt_screenshot.png)

---

Glamorous Toolkit: Notebook
---------------------------
![stretch](images/gt_screenshot.png)

***

* Various snippets
* Object-based:
  * embeddable
  * inspectable
  * moldable

---

Glamorous Toolkit: Coder
------------------------
![stretch](media/coder.png)

---

Glamorous Toolkit: Coder
------------------------
![stretch](media/coder.png)

***

* Open source
* Extensions through `<pragma>`

---

Approaches Considered
---------------------
* Python through PythonBridge
  * Requires separate Python installation ❌
<PAUSE>
* Python compiler
  * GT contains a compiler ❌
<PAUSE>
* Python transpiler
  * Reuse `OpalCompiler` ✔

---

Transpiling Python
------------------
Python source
* parser $->$ AST
* visitor $->$ Smalltalk
* compiler $->$ Bytecode
* runtime $->$ Output

---

Transpiling Python
------------------
## Python
``` python
a = 1
b = 1
while a < 15:
	
	a += b
	b = a - b
	
print(a)
```

***

## Smalltalk
```
a := 1.
b := 1.
[ (a < 15) ]
  whileTrue: [
	a := (a + b).
	b := (a - b).
  ].
gtCanvas print: a.
```

---

Viewing Abstractions
--------------------
	{\hspace*{-0.5cm}\small
	\input{../diagrams/views}
	}

---

Views
-----
![stretch](media/views.png)

***

* Live
* Composable
* Stand-alone or embeddable

---

Demo: Views
-----------
![stretch](media/views.png)

---

Demo: Interaction
-----------------
![stretch](media/interaction.png)

---

Course Material
---------------
* Introduction to programming
* Computer architecture
  (from app to processor)
* Compiling

---

| 4. Validation |

---

Setting
-------
* Two classes
* Two lessons each:
  * Computer architecture
  * Compiling
* Observations and feedback

---

Feedback: Acceptance
--------------------
How did you like working with this environment?

	\begin{center}
	\begin{tikzpicture}[baseline=(current axis.center), scale=0.9]
	\begin{axis}[
		ybar,
		y=0.5cm,
		xmin=1,
		xmax=5,
		xlabel={1 = not at all, 5 = very much},
		ylabel={No. of answers}
	]
		\addplot+[hist] table [row sep=\\,y index=0] {
			Q1 \\ 4 \\ 4 \\ 3 \\ 3 \\ 4 \\ 4 \\ 4 \\ 4 \\ 3 \\
		};
	\end{axis}
	\end{tikzpicture}
	\end{center}

---

Feedback: Confidence
--------------------
How confident do you feel to explain the learned content?

	\begin{center}
	\begin{tikzpicture}[baseline=(current axis.center), scale=0.9]
	\begin{axis}[
		ybar,
		y=0.5cm,
		xmin=1,
		xmax=5,
		xlabel={1 = not at all, 5 = very much},
		ylabel={No. of answers}
	]
		\addplot+[hist] table [row sep=\\,y index=0] {
			Q3 \\ 4 \\ 3 \\ 2 \\ 1 \\ 2 \\ 3 \\ 2 \\ 3 \\ 2 \\
		};
	\end{axis}
	\end{tikzpicture}
	\end{center}

---

Feedback: Aspects
-----------------
What did you like most about it?

* Interactivity
* Modifiability
* Autonomy

---

Conclusion
----------
* Interactive teaching material
* Various (in)sights into abstraction layers
* Not validated (yet)

![height=3cm](images/gt_screenshot.png)

---

| Thanks for listening. |

---

| Q & A |
