@book{Har20,
	title        = {Programmieren in Python},
	author       = {Hartinger, Stefan},
	year         = 2020,
	publisher    = {Universit\"{a}t Regensburg},
	url          = {https://www.uni-regensburg.de/assets/physik/fakultaet/IT/Tutorials-Installation-Programming-Environment/Programmieren_in_Python.pdf},
	urldate      = {2025-05-27}
}
@book{Mod16,
	title        = {Didaktik der Informatik},
	author       = {Modrow, Eckart and Strecker, Kerstin},
	year         = 2016,
	booktitle    = {Didaktik der Informatik},
	publisher    = {De Gruyter Oldenbourg},
	address      = {M\"{u}nchen},
	series       = {De Gruyter Studium},
	isbn         = {3-486-72011-2},
	abstract     = {Diese Didaktik ist aus der Praxis entstanden und ist das Ergebnis von langj\"{a}hrigen Unterrichtserfahrungen in allen Altersstufen des Gymnasiums, der berufsbegleitenden Informatiklehrerausbildung sowie der universit\"{a}ren Lehre. Das Buch besteht aus einem kompakten theoretischen Teil, gefolgt von vier Kapiteln mit zahlreichen Beispielen, die aus dem Unterricht entstanden und gut erprobt sind. Schulinformatik ist ein wesentlicher Bestandteil einer zeitgem\"{a}\ss{}en Allgemeinbildung. Das technische Fach erm\"{o}glicht durch seine Inhalte, Methoden und Werkzeuge einen sch\"{u}leraktivierenden, produktorientierten Unterricht. Die Beispiele sollen einen Eindruck von diesem Vorgehen vermitteln. In ihrer Menge bilden sie eine Art Ideensammlung f\"{u}r kreativen Unterricht. Das Buch begr\"{u}ndet die Schulinformatik als allgemeinbildendes Fach, das durch sechs fundamentale Ideen gepr\"{a}gt ist. Aus diesen werden Kompetenzbereiche abgeleitet, die sich alters-, schul- und l\"{a}nderspezifisch konkretisieren lassen. In den folgenden Kapiteln werden die Themenbereiche der Schulinformatik den Oberthemen Informatik und Gesellschaft, informatischen Grundlagen, Programmieren und Methodik zugeordnet. Die Autoren beschreiben eine "Informatik f\"{u}r alle" und verwenden daf\"{u}r diverse Varianten grafischer Programmiersprachen. Die meisten Beispiele im Buch werden durch Skripte grafischer Sprachen erl\"{a}utert, die hier als Medium zur Verdeutlichung informatischer Konzepte dienen.},
	keywords     = {Computer science -- Study and teaching (Secondary)},
	language     = {ger}
}
@book{Sch11,
	title        = {Didaktik der Informatik},
	author       = {Schubert, Sigrid and Schwill, Andreas},
	year         = 2011,
	publisher    = {Spektrum Akademischer Verlag},
	address      = {Heidelberg},
	isbn         = 3827426529,
	abstract     = {Wer Informatik unterrichten will, muss nicht nur das Fach beherrschen, sondern seine Kenntnisse und Freude am Fach auch Sch\"{u}lerinnen und Sch\"{u}lern vermitteln k\"{o}nnen. Dieses Buch hilft Ihnen dabei. Es bietet eine ausgewogene und praxisorientierte Gesamtdarstellung der Didaktik der Informatik. Nach der Kl\"{a}rung von Grundbegriffen der Informatik und ihrer Didaktik stellen die Autoren das verwendete Grundmodell f\"{u}r Ziele, Inhalte und Lehrmethoden und die theoretische Fundierung des Informatikunterrichts vor. Hierauf aufbauend untersuchen sie eine Vielzahl von Informatikprinzipien im Hinblick auf Ihre Bedeutung f\"{u}r die Informatikgrundausbildung. Den Themenkomplexen "Probleml\"{o}sen in der Informatik", "Informatisches Modellieren und Konstruieren", "Objektorientierung" und "Informatiksysteme" sind jeweils eigene Kapitel gewidmet, in denen das didaktisch Machbare im Spannungsfeld von fachwissenschaftlich W\"{u}nschenswertem und bildungspolitisch Notwendigem diskutiert wird. Die Neuauflage enth\"{a}lt die aktuellen Entwicklungen zur kompetenzorientierten Didaktik sowie deutliche Erweiterungen zur Vermittlung ausgew\"{a}hlter Informatikinhalte, wie Vernetzung, Internet, Sprachen und Automaten. Neu sind ebenfalls ein Kapitel mit einem Zugang zur Vermittlung informatischer Inhalte, der allgemein als "unplugged" bezeichnet wird, und ein Kapitel "Unterrichtsmittel". Zwei Gastbeitr\"{a}ge zur Kompetenzentwicklung mit Informatiksystemen und zum Stellenwert von Kreativit\"{a}t im Informatikunterricht vertiefen Perspektiven der Unterrichtspraxis.},
	edition      = {2. Auflage},
	keywords     = {informatique - enseignement ; Didactique ; Informatique ; Fachdidaktik ; ICT -- Fachdidaktik ; Fachunterricht ; Informatikunterricht ; Computer science ; Computer science -- Study and teaching ; Mathematics ; FACHUNTERRICHT + FACHDIDAKTIK (UNTERRICHT) ; INFORMATIKAUSBILDUNG ; INFORMATIKUNTERRICHT (FACHUNTERRICHT) ; LEHRBU\"CHER (DOKUMENTENTYP)},
	language     = {ger}
}
@article{Lee20,
	title        = {Computational Thinking from a Disciplinary Perspective: Integrating Computational Thinking in K-12 Science, Technology, Engineering, and Mathematics Education},
	author       = {Lee, Irene and Grover, Shuchi and Martin, Fred and Pillai, Sarita and Malyn-Smith, Joyce},
	year         = 2020,
	journal      = {Journal of science education and technology},
	publisher    = {Springer Netherlands},
	address      = {Dordrecht},
	volume       = 29,
	number       = 1,
	pages        = {1--8},
	issn         = {1059-0145},
	copyright    = {Springer Nature B.V. 2019},
	abstract     = {This article provides an introduction for the special issue of the Journal of Science Education and Technology focused on computational thinking (CT) from a disciplinary perspective. The special issue connects earlier research on what K-12 students can learn and be able to do using CT with the CT skills and habits of mind needed to productively participate in professional CT-integrated STEM fields. In this context, the phrase ``disciplinary perspective'' simultaneously holds two meanings: it refers to and aims to make connections between established K-12 STEM subject areas (science, technology, engineering, and mathematics) and newer CT-integrated disciplines such as computational sciences. The special issue presents a framework for CT integration and includes articles that illuminate what CT looks like from a disciplinary perspective, the challenges inherent in integrating CT into K-12 STEM education, and new ways of measuring CT aligned more closely with disciplinary practices. The aim of this special issue is to offer research-based and practitioner-grounded insights into recent work in CT integration and provoke new ways of thinking about CT integration from researchers, practitioners, and research-practitioner partnerships.},
	keywords     = {Education ; Educational technology ; Mathematical analysis ; Research ; Technical education},
	language     = {eng}
}
@article{Wei16,
	title        = {Playing by Programming: Making Gameplay a Programming Activity},
	author       = {David Weintrop and Uri Wilensky},
	year         = 2016,
	journal      = {Educational Technology},
	publisher    = {Educational Technology Publications, Inc.},
	volume       = 56,
	number       = 3,
	pages        = {36--41},
	issn         = {00131962},
	url          = {http://www.jstor.org/stable/44430491},
	urldate      = {2025-05-27},
	abstract     = {Video games are an oft-cited reason for young learners getting interested in programming and computer science. As such, many learning opportunities build on this interest by having kids program their own video games. This approach, while sometimes successful, has its drawbacks stemming from the fact that the challenge of programming and game building are left distinct from the gameplay experience that initially drew learners in. An alternate strategy to engage learners in programming that builds on their interest and enjoyment of video games is to integrate programming into the gameplay experience directly through the design of program-to-play games. These games make programming a central part of the activity of playing the game, fully immersing programming within the game context. In this article, the authors develop the genre of program-to-play games, discuss key features of these environments and their pedagogical potential, and highlight some exemplar program-to-play games.}
}
@article{Cak17,
	title        = {Flipped Classroom with Problem Based Activities: Exploring Self-regulated Learning in a Programming Language Course},
	author       = {\"{U}nal \c{C}ak\i{}ro\u{g}lu and M\"{u}cahit \"{O}zt\"{u}rk},
	year         = 2017,
	journal      = {Journal of Educational Technology \& Society},
	publisher    = {International Forum of Educational Technology \& Society},
	volume       = 20,
	number       = 1,
	pages        = {337--349},
	issn         = {11763647, 14364522},
	url          = {http://www.jstor.org/stable/jeductechsoci.20.1.337},
	urldate      = {2025-05-27},
	abstract     = {ABSTRACT This study intended to explore the development of self-regulation in a flipped classroom setting. Problem based learning activities were carried out in flipped classrooms to promote self-regulation. A total of 30 undergraduate students from Mechatronic department participated in the study. Self-regulation skills were discussed through students' and the instructor's experiences including their opinions and behaviours. Qualitative data was collected with an observation form, discussion messages and interviews with selected participants. As a result, in terms of self-regulated learning, the goal setting and planning, task strategies and help seeking skills of the students were high in the face to face learning designed with problem based activities through flipped classroom model, their goal setting and planning, task strategies and help seeking skills were appeared moderately. In the home sessions, environment structuring, goal setting and planning skills were developed in high level while task strategies, help seeking, time management, monitoring, self-efficacy and self-evaluation skills were moderate and monitoring skills was lower. Consequently, it is hoped that the study may provide some suggestions for using problem based activities in flipped learning.}
}
@article{Jao12,
	title        = {Concepts of Programming Languages for Kids},
	author       = {Ajit Jaokar},
	year         = 2012,
	journal      = {Educational Technology},
	publisher    = {Educational Technology Publications, Inc.},
	volume       = 52,
	number       = 3,
	pages        = {50--52},
	issn         = {00131962},
	url          = {http://www.jstor.org/stable/44430043},
	urldate      = {2025-05-27}
}
@book{Nis21,
	title        = {The elements of computing systems : building a modern computer from first principles},
	author       = {Nisan, Noam and Schocken, Shimon},
	year         = {2021 - 2021},
	booktitle    = {The elements of computing systems building a modern computer from first principles},
	publisher    = {The MIT Press},
	address      = {Cambridge, Massachusetts},
	isbn         = 9780262539807,
	edition      = {Second edition},
	keywords     = {Syst\`{e}mes informatiques ; Construction ; Conception de syst\`{e}mes informatiques ; Ordinateurs ; Computer ; Computerarchitektur ; Programmierung},
	language     = {eng}
}
@article{Nie24,
	title        = {Moldable Development Patterns},
	author       = {Nierstrasz, Oscar and G\^{\i}rba, Tudor},
	year         = 2024,
	copyright    = {http://creativecommons.org/licenses/by-sa/4.0},
	abstract     = {Moldable development supports decision-making by making software systems explainable. This is done by making it cheap to add numerous custom tools to your software, turning it into a live, explorable domain model. Based on several years of experience of applying moldable development to both open-source and industrial systems, we have identified several mutually supporting patterns to explain how moldable development works in practice. This paper targets (i) readers curious to learn about moldable development, (ii) current users of the Glamorous Toolkit moldable IDE wanting to learn best practices, and (iii) developers interested in applying moldable development using other platforms and technology.},
	language     = {eng}
}
@book{Cas14,
	title        = {Processing: A Programming Handbook for Visual Designers and Artists},
	author       = {Casey Reas and Ben Fry},
	year         = 2014,
	publisher    = {The MIT Press},
	isbn         = 9780262028288,
	url          = {http://www.jstor.org/stable/j.ctt1287hvn},
	urldate      = {2025-05-27},
	abstract     = {The visual arts are rapidly changing as media moves into the web, mobile devices, and architecture. When designers and artists learn the basics of writing software, they develop a new form of literacy that enables them to create new media for the present, and to imagine future media that are beyond the capacities of current software tools. This book introduces this new literacy by teaching computer programming within the context of the visual arts. It offers a comprehensive reference and text for Processing (www.processing.org), an open-source programming language that can be used by students, artists, designers, architects, researchers, and anyone who wants to program images, animation, and interactivity. Written by Processing's cofounders, the book offers a definitive reference for students and professionals. Tutorial chapters make up the bulk of the book; advanced professional projects from such domains as animation, performance, and installation are discussed in interviews with their creators.This second edition has been thoroughly updated. It is the first book to offer in-depth coverage of Processing 2.0 and 3.0, and all examples have been updated for the new syntax. Every chapter has been revised, and new chapters introduce new ways to work with data and geometry. New "synthesis" chapters offer discussion and worked examples of such topics as sketching with code, modularity, and algorithms. New interviews have been added that cover a wider range of projects. "Extension" chapters are now offered online so they can be updated to keep pace with technological developments in such fields as computer vision and electronics.InterviewsSUE.C, Larry Cuba, Mark Hansen, Lynn Hershman Leeson, J\"{u}rg Lehni, LettError, Golan Levin and Zachary Lieberman, Benjamin Maus, Manfred Mohr, Ash Nehru, Josh On, Bob Sabiston, Jennifer Steinkamp, Jared Tarbell, Steph Thirion, Robert Winter},
	edition      = 2
}
@article{Rei18,
	title        = {Exploratory and Live, Programming and Coding},
	author       = {Patrick Rein and Stefan Ramson and Jens Lincke and Robert Hirschfeld and Tobias Pape},
	year         = 2018,
	journal      = {The Art, Science, and Engineering of Programming},
	publisher    = {AOSA},
	volume       = 3,
	number       = 1,
	pages        = {1:1--1::32},
	url          = {https://doi.org/10.22152/programming-journal.org/2019/3/1},
	urldate      = {2025-06-11}
}
@misc{Spo02,
	title        = {The Law of Leaky Abstractions},
	author       = {Joel Spolsky},
	year         = 2002,
	url          = {https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/},
	urldate      = {2025-06-16},
	note         = {https://www.joelonsoftware.com/2002/11/11/the-law-of-leaky-abstractions/}
}
@misc{Egg24,
	title        = {The Law of Leaky Abstractions: A Guide for the Pragmatic Programmer},
	author       = {Michael Egger},
	year         = 2024,
	url          = {https://medium.com/@mesw1/the-law-of-leaky-abstractions-a-guide-for-the-pragmatic-programmer-9bf80545c43f},
	urldate      = {2025-06-16},
	note         = {https://medium.com/\@mesw1/the-law-of-leaky-abstractions-a-guide-for-the-pragmatic-programmer-9bf80545c43f}
}
@article{Bui17,
	title        = {Changing a Generation's Way of Thinking: Teaching Computational Thinking Through Programming},
	author       = {Francisco Buitrago Fl\'{o}rez and Rubby Casallas and Marcela Hern\'{a}ndez and Alejandro Reyes and Silvia Restrepo and Giovanna Danies},
	year         = 2017,
	journal      = {Review of Educational Research},
	publisher    = {[Sage Publications, Inc., American Educational Research Association]},
	volume       = 87,
	number       = 4,
	pages        = {834--860},
	issn         = {00346543, 19351046},
	url          = {http://www.jstor.org/stable/44667676},
	urldate      = {2025-06-16},
	abstract     = {Computational thinking (CT) uses concepts that are essential to computing and information science to solve problems, design and evaluate complex systems, and understand human reasoning and behavior. This way of thinking has important implications in computer sciences as well as in almost every other field. Therefore, we contend that CT should be taught in elementary schools and included in every university's educational curriculum. Several studies that measure the impact of teaching programming, analytical thinking, and CT have been conducted. In this review, we analyze and discuss findings from these studies and highlight the importance of learning programming with a focus on the development of CT skills at a young age. We also describe the tools that are available to improve the teaching of CT and provide a state-of-the-art overview of how programming is being taught at schools and universities in Colombia and around the world.}
}
@article{Doy84,
	title        = {A Discovery Approach to Teaching Programming},
	author       = {William H. Doyle},
	year         = 1984,
	journal      = {The Arithmetic Teacher},
	publisher    = {National Council of Teachers of Mathematics},
	volume       = 32,
	number       = 4,
	pages        = {16--28},
	issn         = {0004136X},
	url          = {http://www.jstor.org/stable/41194009},
	urldate      = {2025-06-16}
}
@inproceedings{Xia12,
	title        = {Toward more effective strategies in teaching programming for novice students},
	author       = {Xiaoyuan Suo},
	year         = 2012,
	booktitle    = {Proceedings of IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE) 2012},
	volume       = {},
	number       = {},
	pages        = {T2A-1-T2A-3},
	doi          = {10.1109/TALE.2012.6360379},
	keywords     = {Programming profession;Terminology;Problem-solving;Educational institutions;novice students;teaching programming;CS1;teaching programming}
}
@inproceedings{Erc20,
	title        = {Teaching programming: An evidence based and reflective approach},
	author       = {Ercan, M. Fikret and Sale, Dennis},
	year         = 2020,
	booktitle    = {2020 IEEE REGION 10 CONFERENCE (TENCON)},
	volume       = {},
	number       = {},
	pages        = {997--1001},
	doi          = {10.1109/TENCON50793.2020.9293812},
	keywords     = {Education;Programming profession;Electrical engineering;Tools;Task analysis;Monitoring;Industries;Computer programming;evidence based teaching;engineering education}
}
@inproceedings{Zha19,
	title        = {Teaching Strategy of Programming Course Guided by Neuroeducation},
	author       = {Zhang, Jianwei},
	year         = 2019,
	booktitle    = {2019 14th International Conference on Computer Science \& Education (ICCSE)},
	volume       = {},
	number       = {},
	pages        = {406--409},
	doi          = {10.1109/ICCSE.2019.8845519},
	keywords     = {Programming profession;Psychology;Computer languages;Grammar;Training;neuroeducation;programming course;teaching strategy;computational thinking}
}
@inproceedings{Mer15,
	title        = {Teaching computer programming: Practices, difficulties and opportunities},
	author       = {Merch\'{a}n Rubiano, Sandra Milena and L\'{o}pez-Cruz, Orlando and G\'{o}mez Soto, Esteban},
	year         = 2015,
	booktitle    = {2015 IEEE Frontiers in Education Conference (FIE)},
	volume       = {},
	number       = {},
	pages        = {1--9},
	doi          = {10.1109/FIE.2015.7344184},
	keywords     = {Computers;Education;Computer languages;Programming profession;Problem-solving;Software;Computing education research;teaching computer programming;introductory programming;programming pedagogy;novice programmers}
}
@article{Col99,
	title        = {Software, Abstraction, and Ontology},
	author       = {Timothy R. Colburn},
	year         = 1999,
	journal      = {The Monist},
	publisher    = {Oxford University Press},
	volume       = 82,
	number       = 1,
	pages        = {3--19},
	issn         = {00269662},
	url          = {http://www.jstor.org/stable/27903620},
	urldate      = {2025-06-16},
	abstract     = {This paper analyzes both philosophical and practical assumptions underlying claims for the dual nature of software, including software as a machine made of text, and software as a concrete abstraction. A related view of computer science as a branch of pure mathematics is analyzed through a comparative examination of the nature of abstraction in mathematics and computer science. The relationship between the concrete and the abstract in computer programs is then described by exploring a taxonomy of approaches borrowed from philosophy of mind.}
}
@book{Gir23,
	title        = {Glamorous Toolkit},
	author       = {Tudor G\^{\i}rba and Oscar Nierstrasz and others},
	publisher    = {feenk},
	url          = {https://book.gtoolkit.com/},
	urldate      = {2025-06-16}
}
@inproceedings{Ann15,
	title        = {Introducing Thonny, a Python IDE for learning programming},
	author       = {Annamaa, Aivar},
	year         = 2015,
	booktitle    = {Proceedings of the 15th Koli Calling Conference on Computing Education Research},
	location     = {Koli, Finland},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {Koli Calling '15},
	pages        = {117--121},
	doi          = {10.1145/2828959.2828969},
	isbn         = 9781450340205,
	url          = {https://doi.org/10.1145/2828959.2828969},
	abstract     = {Thonny is a new Python IDE for learning and teaching programming that can make program visualization a natural part of the beginners' workflow. Among its prominent features are different ways of stepping through the code, step-by-step expression evaluation, intuitive visualization of the call stack and mode for explaining the concepts of references and heap. It supports educational research by logging user actions for replaying or analyzing the programming process. It is free to use and open for extension.},
	numpages     = 5,
	keywords     = {programming, program visualization, program animation, computing education, Python, IDE}
}
@misc{Tol23,
	title        = {The Visual Debugger},
	author       = {Nicholas H. Tollervey},
	year         = 2023,
	url          = {https://codewith.mu/en/tutorials/1.2/debugger},
	urldate      = {2025-06-17},
	note         = {https://codewith.mu/en/tutorials/1.2/debugger}
}
@inproceedings{10.1145/3598579.3689377,
	title        = {Teaching Programming Error Message Understanding},
	author       = {Bouvier, Dennis J and Lovellette, Ellie and Santos, Eddie Antonio and Becker, Brett A. and Dasigi, Venu G. and Forden, Jack and Glebova, Olga and Joshi, Swaroop and Kurkovsky, Stan and Russell, Se\'{a}n},
	year         = 2024,
	booktitle    = {Working Group Reports on 2023 ACM Conference on Global Computing Education},
	location     = {Hyderabad, India},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {CompEd 2023},
	pages        = {1--30},
	doi          = {10.1145/3598579.3689377},
	isbn         = 9798400702228,
	url          = {https://doi.org/10.1145/3598579.3689377},
	abstract     = {About a decade ago there was a sharp increase in the number of research publications focusing on programming error messages. The majority of this work focused on improving or "enhancing'' compiler error messages to make them easier for humans, especially novice programmers, to interpret and use more effectively. Little research has been published on explicitly teaching students how to effectively utilize error messages, or leveraging programming error messages as learning opportunities. However, there is no shortage of research showing that error and warning messages present barriers to students learning to program. Additionally, unhelpful and/or unfriendly error messages can cause frustration and negative emotions. We operate on the premise that not utilizing programming error and warning messages effectively, or at all, increases the difficulty of learning to program, and the undesired effects that this is known to have. As compiler messages vary by programming language and/or development environment, both in message and presentation, lessons on interpreting them are not typically included in mainstream educational materials. We believe this gap can be filled and that students can learn to use error messages to their advantage. Further, we believe that teaching students how to read and use error messages can have a significant positive impact on the learning experience for novice programmers. This work presents research on teaching novice programmers how to use programming error messages. Reported here are results from (a) a global survey of computing instructors investigating teaching the use of error / warning messages to novice programmers, (b) a multi-national pilot survey of 345 students about their experience with and attitudes toward error messages, (c) a search for existing online resources created and used by computing faculty, as well as (d) results of an empirical study with 1061 student participants testing an example lesson on using programming language use. The data show our single class-period example lesson makes a difference in student attitude toward programming error messages and their ability to use the messages.},
	numpages     = 30,
	keywords     = {computer error messages, computing education, error messages, novice programmers, programming error messages, runtime errors, warning messages}
}
@inproceedings{10.1145/3649217.3653527,
	title        = {Teaching Programming in the Age of Generative AI},
	author       = {Martini, Simone},
	year         = 2024,
	booktitle    = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 1},
	location     = {Milan, Italy},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {ITiCSE 2024},
	pages        = {1--2},
	doi          = {10.1145/3649217.3653527},
	isbn         = 9798400706004,
	url          = {https://doi.org/10.1145/3649217.3653527},
	abstract     = {Programming has been considered the "essence of informatics" since the beginning of computing as a discipline. But programming in the fifties was very different from what we know today, and one of the goals (or dreams) throughout the history of programming language technology, has been "automatic programming''---the ability to automatically generate computer code starting from a high(er)-level description of the specification of that code. What this meant changed over the years, from punching paper tape, to compiling high-level programming languages, to program synthesis.Today, however, the availability of machine learning artefacts that produce high-level code from natural language specifications has completely changed the traditional meaning. To the extent that some computer scientists have begun to question the received wisdom that the core of their discipline is deeply rooted in programming.If programming and programming languages are no longer the essence of computer science, this changes the epistemology of the discipline itself. Moreover, if we are at the end of programming, we should also change the curriculum, where programming, algorithms and programming languages play a major role. Several recent papers reviewed the performance of code generators based on large language models on typical CS1 problems (e.g., from the many possible citations and how machine learning impacts K-12 teaching.Starting from this data, I will argue for the role of programming in the curriculum, distinguishing between programming taught as part of a holistic curriculum (as in some non-technical high schools) or as a vocational tool. I will use Simondon's notion of (closed and open) technical object as an interpretive lens, together with Calvino's reflections on the availability of writing machines capable of replacing the poet and the author.},
	numpages     = 2,
	keywords     = {epistemology, large language models, programming}
}
@inproceedings{10.1145/3622780.3623644,
	title        = {Teaching Programming with Graphics: Pitfalls and a Solution},
	author       = {Chiodini, Luca and Sorva, Juha and Hauswirth, Matthias},
	year         = 2023,
	booktitle    = {Proceedings of the 2023 ACM SIGPLAN International Symposium on SPLASH-E},
	location     = {Cascais, Portugal},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {SPLASH-E 2023},
	pages        = {1--12},
	doi          = {10.1145/3622780.3623644},
	isbn         = 9798400703904,
	url          = {https://doi.org/10.1145/3622780.3623644},
	abstract     = {Many introductory programming courses employ graphics   libraries that promote engagement and enable fun visuals.   However, student excitement over graphical outputs is not a   guarantee of conceptual understanding of programming, and   graphics may even distract from intended learning outcomes.   Our contribution is twofold. First, we analyze a selection of   existing graphics libraries designed for novice programmers.   We consider how these libraries foster clean decomposition,   direct students' attention to key content, and manage complexity; we find shortcomings in these respects. These shortcomings involve the libraries' support for global coordinates  and external graphics, as well as their rich APIs; we argue   that these features, although powerful, are also potential   pitfalls in student learning. Second, we present the design of   a new graphics library, PyTamaro, which avoids the pitfalls   with a minimalist design that eschews coordinates; we also   outline a pedagogical approach that builds on PyTamaro's   strengths and deliberate limitations. We briefly discuss PyTamaro's trade-offs in comparison to coordinate-based libraries.   The work reported here paves the way for future empirical   evaluations of PyTamaro and associated teaching practices.},
	numpages     = 12,
	keywords     = {visual, programming, novices, library, graphics, education, decomposition}
}
@inproceedings{Jal22,
	title        = {Demystifying the Abstractness: Teaching Programming Concepts with Visualization},
	author       = {Jalalitabar, Maryam and Wang, Yang},
	year         = 2022,
	booktitle    = {Proceedings of the 23rd Annual Conference on Information Technology Education},
	location     = {Chicago, IL, USA},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {SIGITE '22},
	pages        = {134--136},
	doi          = {10.1145/3537674.3555786},
	isbn         = 9781450393911,
	url          = {https://doi.org/10.1145/3537674.3555786},
	abstract     = {The abstract nature of programming concepts in CS/IT courses causes challenges for undergraduate students to grasp them. Visualization tools can mitigate this challenge by providing a ''what you see is what you get'' experience. Given the diversity of the tools and the fast pace of software updates, it remains a question to select the best-fit tools that can be of current use for the respective programming concepts. This study aims at providing an assessment and classification of visualization tools based on four defined metrics which suggests a hybrid approach for selecting combination of visualization tools in teaching.},
	numpages     = 3,
	keywords     = {Assessment Metrics, Programming Concepts, Visualization}
}
@inproceedings{10.1145/3456565.3460030,
	title        = {CorrectWriting: Open-Ended Question with Hints for Teaching Programming-Language Syntax},
	author       = {Sychev, Oleg},
	year         = 2021,
	booktitle    = {Proceedings of the 26th ACM Conference on Innovation and Technology in Computer Science Education V. 2},
	location     = {Virtual Event, Germany},
	publisher    = {Association for Computing Machinery},
	address      = {New York, NY, USA},
	series       = {ITiCSE '21},
	pages        = {623--624},
	doi          = {10.1145/3456565.3460030},
	isbn         = 9781450383974,
	url          = {https://doi.org/10.1145/3456565.3460030},
	abstract     = {Teaching students to construct correct statements in programming languages is an important part of introductory programming courses. While modern development environments highlight syntax errors, they do not stimulate thinking in grammatical terms to help the student understand and memorize syntax rules. To facilitate learning syntax, we developed CorrectWriting, a question-type plug-in for the popular LMS Moodle. It finds mistakes in token order and composition and detects typos, including missing and extraneous separators. Mistake messages use teacher-supplied token descriptions to show the grammatical role of each wrong token. Hints are provided about students' mistakes. CorrectWriting questions are actively used by the students of Volgograd State Technical University to prepare for classwork.},
	numpages     = 2,
	keywords     = {computer science education, feedback generation, introductory programming courses, online learning, open-ended questions, quizzing}
}
@article{10.5555/3280489.3280526,
	title        = {Teaching programming with Grace at Portland state},
	author       = {Black, Andrew P. and Bruce, Kim B.},
	year         = 2018,
	month        = oct,
	journal      = {J. Comput. Sci. Coll.},
	publisher    = {Consortium for Computing Sciences in Colleges},
	address      = {Evansville, IN, USA},
	volume       = 34,
	number       = 1,
	pages        = {223--230},
	issn         = {1937-4771},
	issue_date   = {October 2018},
	abstract     = {The Grace programming language has been a work-in-progress since 2010, when a group of educators who were also programming language researchers committed to designing a new object-oriented programming language targeted at teaching. The design of Grace is largely complete, and has been described elsewhere; implementation is sufficiently advanced for Grace to have been used for teaching ten classes - mostly of novices. This article offers an impression of how Grace works in the classroom.},
	numpages     = 8
}
@misc{Mic25,
	title        = {Python debugging in VS Code},
	url          = {https://code.visualstudio.com/docs/python/debugging},
	urldate      = {2025-06-17},
	note         = {https://code.visualstudio.com/docs/python/debugging}
}
@misc{Jet25,
	title        = {Debug Your Python Code with PyCharm},
	url          = {https://www.jetbrains.com/pycharm/features/debugger.html},
	urldate      = {2025-06-17},
	note         = {https://www.jetbrains.com/pycharm/features/debugger.html}
}
@misc{Ecl25,
	title        = {PyDev - Python IDE for Eclipse},
	url          = {https://marketplace.eclipse.org/content/pydev-python-ide-eclipse},
	urldate      = {2025-06-17},
	note         = {https://marketplace.eclipse.org/content/pydev-python-ide-eclipse}
}
@misc{Pyt25,
	title        = {Online Compiler, AI Tutor, and Visual Debugger for Python, Java, C, C++, and JavaScript},
	url          = {https://pythontutor.com/},
	urldate      = {2025-06-17},
	note         = {https://pythontutor.com/}
}
@booklet{Erz16,
	title        = {Lehrplan 17 f\"{u}r den gymnasialen Bildungsgang},
	year         = 2016,
	publisher    = {Erziehungsdirektion des Kantons Bern},
	url          = {https://www.bkd.be.ch/content/dam/bkd/dokumente/de/themen/bildung/mittelschulen/gymnasium/ams-gym-lehrplan-17-neu-ab-sj19-20-gesamtdokument.pdf},
	urldate      = {2025-06-19}
}
@misc{Tom15,
	title        = {Human Resource Machine: Hour of Code edition},
	publisher    = {Tomorrow Corporation},
	url          = {https://tomorrowcorporation.com/human-resource-machine-hour-of-code-edition},
	urldate      = {2025-06-19},
	note         = {https://tomorrowcorporation.com/human-resource-machine-hour-of-code-edition}
}
@misc{Oin25,
	title        = {Little Man Computer},
	publisher    = {NKSA OINF},
	url          = {https://oinf.ch/interactive/little-man-computer/},
	urldate      = {2025-06-19},
	note         = {https://oinf.ch/interactive/little-man-computer/}
}
@misc{Gan23,
	title        = {Von Neumann Machine Simulator},
	author       = {Lorenzo Ganni},
	year         = 2023,
	url          = {https://vnsim.lehrerlezius.de/},
	urldate      = {2025-06-19},
	note         = {https://vnsim.lehrerlezius.de/}
}
@misc{Por18,
	title        = {Constant-Time Crypto},
	author       = {Thomas Pornin},
	year         = 2018,
	url          = {https://www.bearssl.org/constanttime.html},
	urldate      = {2025-06-20},
	note         = {https://www.bearssl.org/constanttime.html}
}
@inproceedings{Koc19,
	title        = {Spectre Attacks: Exploiting Speculative Execution},
	author       = {Paul Kocher and Jann Horn and Anders Fogh and and Daniel Genkin and Daniel Gruss and Werner Haas and Mike Hamburg and Moritz Lipp and Stefan Mangard and Thomas Prescher and Michael Schwarz and Yuval Yarom},
	year         = 2019,
	booktitle    = {40th IEEE Symposium on Security and Privacy (S\&P'19)}
}
