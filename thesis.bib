@book{Har20,
	title        = {Programmieren in Python},
	author       = {Hartinger, Stefan},
	year         = 2020,
	publisher    = {Universit\"{a}t Regensburg},
	url          = {https://www.uni-regensburg.de/assets/physik/fakultaet/IT/Tutorials-Installation-Programming-Environment/Programmieren_in_Python.pdf},
	urldate      = {2025-05-27}
}
@book{Mod16,
	title        = {Didaktik der Informatik},
	author       = {Modrow, Eckart and Strecker, Kerstin},
	year         = 2016,
	booktitle    = {Didaktik der Informatik},
	publisher    = {De Gruyter Oldenbourg},
	address      = {M\"{u}nchen},
	series       = {De Gruyter Studium},
	isbn         = {3-486-72011-2},
	abstract     = {Diese Didaktik ist aus der Praxis entstanden und ist das Ergebnis von langj\"{a}hrigen Unterrichtserfahrungen in allen Altersstufen des Gymnasiums, der berufsbegleitenden Informatiklehrerausbildung sowie der universit\"{a}ren Lehre. Das Buch besteht aus einem kompakten theoretischen Teil, gefolgt von vier Kapiteln mit zahlreichen Beispielen, die aus dem Unterricht entstanden und gut erprobt sind. Schulinformatik ist ein wesentlicher Bestandteil einer zeitgem\"{a}\ss{}en Allgemeinbildung. Das technische Fach erm\"{o}glicht durch seine Inhalte, Methoden und Werkzeuge einen sch\"{u}leraktivierenden, produktorientierten Unterricht. Die Beispiele sollen einen Eindruck von diesem Vorgehen vermitteln. In ihrer Menge bilden sie eine Art Ideensammlung f\"{u}r kreativen Unterricht. Das Buch begr\"{u}ndet die Schulinformatik als allgemeinbildendes Fach, das durch sechs fundamentale Ideen gepr\"{a}gt ist. Aus diesen werden Kompetenzbereiche abgeleitet, die sich alters-, schul- und l\"{a}nderspezifisch konkretisieren lassen. In den folgenden Kapiteln werden die Themenbereiche der Schulinformatik den Oberthemen Informatik und Gesellschaft, informatischen Grundlagen, Programmieren und Methodik zugeordnet. Die Autoren beschreiben eine "Informatik f\"{u}r alle" und verwenden daf\"{u}r diverse Varianten grafischer Programmiersprachen. Die meisten Beispiele im Buch werden durch Skripte grafischer Sprachen erl\"{a}utert, die hier als Medium zur Verdeutlichung informatischer Konzepte dienen.},
	keywords     = {Computer science -- Study and teaching (Secondary)},
	language     = {ger}
}
@book{Sch11,
	title        = {Didaktik der Informatik},
	author       = {Schubert, Sigrid and Schwill, Andreas},
	year         = 2011,
	publisher    = {Spektrum Akademischer Verlag},
	address      = {Heidelberg},
	isbn         = 3827426529,
	abstract     = {Wer Informatik unterrichten will, muss nicht nur das Fach beherrschen, sondern seine Kenntnisse und Freude am Fach auch Sch\"{u}lerinnen und Sch\"{u}lern vermitteln k\"{o}nnen. Dieses Buch hilft Ihnen dabei. Es bietet eine ausgewogene und praxisorientierte Gesamtdarstellung der Didaktik der Informatik. Nach der Kl\"{a}rung von Grundbegriffen der Informatik und ihrer Didaktik stellen die Autoren das verwendete Grundmodell f\"{u}r Ziele, Inhalte und Lehrmethoden und die theoretische Fundierung des Informatikunterrichts vor. Hierauf aufbauend untersuchen sie eine Vielzahl von Informatikprinzipien im Hinblick auf Ihre Bedeutung f\"{u}r die Informatikgrundausbildung. Den Themenkomplexen "Probleml\"{o}sen in der Informatik", "Informatisches Modellieren und Konstruieren", "Objektorientierung" und "Informatiksysteme" sind jeweils eigene Kapitel gewidmet, in denen das didaktisch Machbare im Spannungsfeld von fachwissenschaftlich W\"{u}nschenswertem und bildungspolitisch Notwendigem diskutiert wird. Die Neuauflage enth\"{a}lt die aktuellen Entwicklungen zur kompetenzorientierten Didaktik sowie deutliche Erweiterungen zur Vermittlung ausgew\"{a}hlter Informatikinhalte, wie Vernetzung, Internet, Sprachen und Automaten. Neu sind ebenfalls ein Kapitel mit einem Zugang zur Vermittlung informatischer Inhalte, der allgemein als "unplugged" bezeichnet wird, und ein Kapitel "Unterrichtsmittel". Zwei Gastbeitr\"{a}ge zur Kompetenzentwicklung mit Informatiksystemen und zum Stellenwert von Kreativit\"{a}t im Informatikunterricht vertiefen Perspektiven der Unterrichtspraxis.},
	edition      = {2. Auflage},
	keywords     = {informatique - enseignement ; Didactique ; Informatique ; Fachdidaktik ; ICT -- Fachdidaktik ; Fachunterricht ; Informatikunterricht ; Computer science ; Computer science -- Study and teaching ; Mathematics ; FACHUNTERRICHT + FACHDIDAKTIK (UNTERRICHT) ; INFORMATIKAUSBILDUNG ; INFORMATIKUNTERRICHT (FACHUNTERRICHT) ; LEHRBU\"CHER (DOKUMENTENTYP)},
	language     = {ger}
}
@article{Lee20,
	title        = {Computational Thinking from a Disciplinary Perspective: Integrating Computational Thinking in K-12 Science, Technology, Engineering, and Mathematics Education},
	author       = {Lee, Irene and Grover, Shuchi and Martin, Fred and Pillai, Sarita and Malyn-Smith, Joyce},
	year         = 2020,
	journal      = {Journal of science education and technology},
	publisher    = {Springer Netherlands},
	address      = {Dordrecht},
	volume       = 29,
	number       = 1,
	pages        = {1--8},
	issn         = {1059-0145},
	copyright    = {Springer Nature B.V. 2019},
	abstract     = {This article provides an introduction for the special issue of the Journal of Science Education and Technology focused on computational thinking (CT) from a disciplinary perspective. The special issue connects earlier research on what K-12 students can learn and be able to do using CT with the CT skills and habits of mind needed to productively participate in professional CT-integrated STEM fields. In this context, the phrase ``disciplinary perspective'' simultaneously holds two meanings: it refers to and aims to make connections between established K-12 STEM subject areas (science, technology, engineering, and mathematics) and newer CT-integrated disciplines such as computational sciences. The special issue presents a framework for CT integration and includes articles that illuminate what CT looks like from a disciplinary perspective, the challenges inherent in integrating CT into K-12 STEM education, and new ways of measuring CT aligned more closely with disciplinary practices. The aim of this special issue is to offer research-based and practitioner-grounded insights into recent work in CT integration and provoke new ways of thinking about CT integration from researchers, practitioners, and research-practitioner partnerships.},
	keywords     = {Education ; Educational technology ; Mathematical analysis ; Research ; Technical education},
	language     = {eng}
}
@article{Wei16,
	title        = {Playing by Programming: Making Gameplay a Programming Activity},
	author       = {David Weintrop and Uri Wilensky},
	year         = 2016,
	journal      = {Educational Technology},
	publisher    = {Educational Technology Publications, Inc.},
	volume       = 56,
	number       = 3,
	pages        = {36--41},
	issn         = {00131962},
	url          = {http://www.jstor.org/stable/44430491},
	urldate      = {2025-05-27},
	abstract     = {Video games are an oft-cited reason for young learners getting interested in programming and computer science. As such, many learning opportunities build on this interest by having kids program their own video games. This approach, while sometimes successful, has its drawbacks stemming from the fact that the challenge of programming and game building are left distinct from the gameplay experience that initially drew learners in. An alternate strategy to engage learners in programming that builds on their interest and enjoyment of video games is to integrate programming into the gameplay experience directly through the design of program-to-play games. These games make programming a central part of the activity of playing the game, fully immersing programming within the game context. In this article, the authors develop the genre of program-to-play games, discuss key features of these environments and their pedagogical potential, and highlight some exemplar program-to-play games.}
}
@article{Cak17,
	title        = {Flipped Classroom with Problem Based Activities: Exploring Self-regulated Learning in a Programming Language Course},
	author       = {\"{U}nal \c{C}ak\i{}ro\u{g}lu and M\"{u}cahit \"{O}zt\"{u}rk},
	year         = 2017,
	journal      = {Journal of Educational Technology \& Society},
	publisher    = {International Forum of Educational Technology \& Society},
	volume       = 20,
	number       = 1,
	pages        = {337--349},
	issn         = {11763647, 14364522},
	url          = {http://www.jstor.org/stable/jeductechsoci.20.1.337},
	urldate      = {2025-05-27},
	abstract     = {ABSTRACT This study intended to explore the development of self-regulation in a flipped classroom setting. Problem based learning activities were carried out in flipped classrooms to promote self-regulation. A total of 30 undergraduate students from Mechatronic department participated in the study. Self-regulation skills were discussed through students' and the instructor's experiences including their opinions and behaviours. Qualitative data was collected with an observation form, discussion messages and interviews with selected participants. As a result, in terms of self-regulated learning, the goal setting and planning, task strategies and help seeking skills of the students were high in the face to face learning designed with problem based activities through flipped classroom model, their goal setting and planning, task strategies and help seeking skills were appeared moderately. In the home sessions, environment structuring, goal setting and planning skills were developed in high level while task strategies, help seeking, time management, monitoring, self-efficacy and self-evaluation skills were moderate and monitoring skills was lower. Consequently, it is hoped that the study may provide some suggestions for using problem based activities in flipped learning.}
}
@article{Jao12,
	title        = {Concepts of Programming Languages for Kids},
	author       = {Ajit Jaokar},
	year         = 2012,
	journal      = {Educational Technology},
	publisher    = {Educational Technology Publications, Inc.},
	volume       = 52,
	number       = 3,
	pages        = {50--52},
	issn         = {00131962},
	url          = {http://www.jstor.org/stable/44430043},
	urldate      = {2025-05-27}
}
@book{Nis21,
	title        = {The elements of computing systems : building a modern computer from first principles},
	author       = {Nisan, Noam and Schocken, Shimon},
	year         = {2021 - 2021},
	booktitle    = {The elements of computing systems building a modern computer from first principles},
	publisher    = {The MIT Press},
	address      = {Cambridge, Massachusetts},
	isbn         = 9780262539807,
	edition      = {Second edition},
	keywords     = {Syst\`{e}mes informatiques ; Construction ; Conception de syst\`{e}mes informatiques ; Ordinateurs ; Computer ; Computerarchitektur ; Programmierung},
	language     = {eng}
}
@article{Nie24,
	title        = {Moldable Development Patterns},
	author       = {Nierstrasz, Oscar and G\^{\i}rba, Tudor},
	year         = 2024,
	copyright    = {http://creativecommons.org/licenses/by-sa/4.0},
	abstract     = {Moldable development supports decision-making by making software systems explainable. This is done by making it cheap to add numerous custom tools to your software, turning it into a live, explorable domain model. Based on several years of experience of applying moldable development to both open-source and industrial systems, we have identified several mutually supporting patterns to explain how moldable development works in practice. This paper targets (i) readers curious to learn about moldable development, (ii) current users of the Glamorous Toolkit moldable IDE wanting to learn best practices, and (iii) developers interested in applying moldable development using other platforms and technology.},
	language     = {eng}
}
@book{Cas14,
	title        = {Processing: A Programming Handbook for Visual Designers and Artists},
	author       = {Casey Reas and Ben Fry},
	year         = 2014,
	publisher    = {The MIT Press},
	isbn         = 9780262028288,
	url          = {http://www.jstor.org/stable/j.ctt1287hvn},
	urldate      = {2025-05-27},
	abstract     = {The visual arts are rapidly changing as media moves into the web, mobile devices, and architecture. When designers and artists learn the basics of writing software, they develop a new form of literacy that enables them to create new media for the present, and to imagine future media that are beyond the capacities of current software tools. This book introduces this new literacy by teaching computer programming within the context of the visual arts. It offers a comprehensive reference and text for Processing (www.processing.org), an open-source programming language that can be used by students, artists, designers, architects, researchers, and anyone who wants to program images, animation, and interactivity. Written by Processing's cofounders, the book offers a definitive reference for students and professionals. Tutorial chapters make up the bulk of the book; advanced professional projects from such domains as animation, performance, and installation are discussed in interviews with their creators.This second edition has been thoroughly updated. It is the first book to offer in-depth coverage of Processing 2.0 and 3.0, and all examples have been updated for the new syntax. Every chapter has been revised, and new chapters introduce new ways to work with data and geometry. New "synthesis" chapters offer discussion and worked examples of such topics as sketching with code, modularity, and algorithms. New interviews have been added that cover a wider range of projects. "Extension" chapters are now offered online so they can be updated to keep pace with technological developments in such fields as computer vision and electronics.InterviewsSUE.C, Larry Cuba, Mark Hansen, Lynn Hershman Leeson, J\"{u}rg Lehni, LettError, Golan Levin and Zachary Lieberman, Benjamin Maus, Manfred Mohr, Ash Nehru, Josh On, Bob Sabiston, Jennifer Steinkamp, Jared Tarbell, Steph Thirion, Robert Winter},
	edition      = 2
}
